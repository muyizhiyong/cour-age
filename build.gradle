buildscript {
    repositories {
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'http://www.datanucleus.org/downloads/maven2/'
        }
        maven {
            url 'http://nexus.pentaho.org/content/groups/omni'
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}"
    }
}

allprojects {
    ext {
        /**
         * gradle jvm 参数:
         * -Dlevel=snapshot  or  -Dlevel=release
         */
        buildLevel = System.getProperty("level") ?: "snapshot"
    }

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'com.muyi.courage'
    version = "$version"
    sourceCompatibility = '1.8'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    if ("release".equals(buildLevel)) {
        version += "-RELEASE"
    } else {
        version += "-SNAPSHOT"
    }

    repositories {
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'http://www.datanucleus.org/downloads/maven2/'
        }
        maven {
            url 'http://nexus.pentaho.org/content/groups/omni'
        }
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR7'
        }
    }

    dependencies {
        // test
        testImplementation "junit:junit:${junitVersion}"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

        // spring
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        runtimeOnly 'org.springframework.boot:spring-boot-devtools'
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        //mongodb
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

        // mybatis
        implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${springBootMybatisVersion}"
        compile "com.github.xiaoymin:knife4j-spring-boot-starter:${knife4jVersion}"
    }
}

subprojects {
    if (it.name.endsWith("common")) {
        dependencies {
            compile 'io.github.openfeign:feign-httpclient'
            compile 'com.netflix.ribbon:ribbon'
       }
    }

    if (it.name.endsWith("-api")) {
        dependencies {
            compile project(":common")
        }
    }


    // 子模块的通用依赖
    dependencies {
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'

        // jdbc
        compile "org.springframework.boot:spring-boot-starter-jdbc"

        // 数据库驱动
        compile 'mysql:mysql-connector-java:5.1.49'

        // redis
        implementation 'com.alibaba:fastjson:1.2.72'
        compile "org.springframework.boot:spring-boot-starter-data-redis"
        compile "org.apache.commons:commons-pool2"

        // mapstruct
        compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        implementation "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"

        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        compile "org.springframework.cloud:spring-cloud-starter-openfeign:2.2.4.RELEASE"
    }
}


// 根项目
dependencies {

    compile project(":quartz:quartz-sdk")
    compile project(":quartz:quartz-impl")

    compile project(":rabbitMq:rabbitMq-api")
    compile project(":rabbitMq:rabbitMq-impl")
    compile project(":rabbitMq:rabbitMq-sdk")

    compile project(":handler:handler-sdk")

    compile project(":auth:auth-api")
    compile project(":auth:auth-impl")

    compile project(":aop:aop-impl")

    compile project(":mongoDB:mongoDB-api")
    compile project(":mongoDB:mongoDB-impl")

    compile project(":algorithm:algorithm-sdk")

    compile project(":user-module:user-api")
    compile project(":user-module:user-impl")

    compile project(":push-module:push-api")
    compile project(":push-module:push-impl")

    compileOnly "io.springfox:springfox-swagger2:${springfoxSwaggerVersion}"
    compileOnly "io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}"
}


// 启动打包到 build/publish/
apply plugin: 'org.springframework.boot'
bootJar {
    doLast {
        copy {
            from("$rootDir/A-bins/")
            into("$buildDir/publish")
        }
        copy {
            from("$rootDir/resources/")
            into("$buildDir/publish/resources")
        }
        copy {
            from("$rootDir/src/main/resources/")
            into("$buildDir/publish/")
        }
        copy {
            from("$buildDir/libs/")
            into("$buildDir/publish/")
        }
    }
}

